repositories {
    mavenCentral()
    maven { url 'https://repository.jboss.org/nexus/content/groups/public' }
}


dependencies {
    testImplementation project(':hermes-common')
    testImplementation project(':hermes-test-helper')
    testImplementation project(':hermes-management')
    testImplementation project(':hermes-consumers')
    testImplementation project(':hermes-frontend')

    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: versions.testcontainers
    testImplementation group: 'com.squareup.okhttp3', name: 'okhttp', version: versions.okhttp
    testImplementation group: 'org.springframework', name: 'spring-webflux', version: '6.0.8'
    testImplementation group: 'org.springframework', name: 'spring-test', version: '6.0.8'
    testImplementation group: 'org.eclipse.jetty', name: 'jetty-reactive-httpclient', version: '3.0.4'
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.0'
    testImplementation group: 'org.reactivestreams', name: 'reactive-streams', version: '1.0.0'


    // TODO: check how to setup junit properly
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.1'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.9.1'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.9.1'
}

def integrationTest = sourceSets.create('integrationTest')

configurations[integrationTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)
configurations[integrationTest.runtimeOnlyConfigurationName].extendsFrom(configurations.testRuntimeOnly)

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('integrationTest', Test) {
    logging.captureStandardOutput LogLevel.INFO

    def args = []
    if (project.hasProperty('tests.timeout.multiplier')) {
        args += "-Dtests.timeout.multiplier=${project.property('tests.timeout.multiplier')}"
    }

    if (project.hasProperty("confluentImagesTag")) {
        args += "-DconfluentImagesTag=${project.property("confluentImagesTag")}"
    }

    args += chronicleMapJvmArgs

    jvmArgs = args
    minHeapSize "2000m"
    maxHeapSize "3500m"

    group = 'Verification'
    description = 'Runs the integration tests.'
    useJUnitPlatform()

    testClassesDirs = integrationTest.output.classesDirs
    classpath = configurations[integrationTest.runtimeClasspathConfigurationName] + integrationTest.output

    testLogging {
        exceptionFormat = 'full'
        events "passed", "skipped", "failed", "standardError", "standardOut"
    }
}