repositories {
    maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
    maven { url 'http://packages.confluent.io/maven/' }
}

project.configurations {
    integration {
        extendsFrom project.configurations.testRuntime
        description = 'Dependencies for integration tests'
        transitive = true
        visible = true
    }
    alpnboot
}


/*
    This is required for proper http2 integration testing. We only need one version at a time but it's rather
    impossible to know which update of Java8 developers are running so we're trying to support all common use cases;
    code refers to: https://github.com/jetty-project/jetty-alpn/blob/master/docs/version_mapping.properties
 */

def getAlpnVersion() {
    def javaVersion = System.getProperty("java.version")
    def matcher = (javaVersion =~ /_(\d+)(-.*)?/)
    def version = matcher.find() ? Integer.parseInt(matcher.group(1)) : 0
    def alpnVersion = {
        switch (version) {
            case 0..24:
                return '8.1.0.v20141016'
            case 25..30:
                return '8.1.2.v20141202'
            case 31..50:
                return '8.1.3.v20150130'
            case 51..59:
                return '8.1.4.v20150727'
            case 60..64:
                return '8.1.5.v20150921'
            case 65..70:
                return '8.1.6.v20151105'
            case 71..77:
                return '8.1.7.v20160121'
            case 78..101:
                return '8.1.8.v20160420'
            case 102..111:
                return '8.1.9.v20160720'
            case 112..120:
                return '8.1.10.v20161026'
            case 121..160:
                return '8.1.11.v20170118'
            case 161..181:
                return '8.1.12.v20180117'
            case 191..242:
                return '8.1.13.v20181017'
            default:
                throw new IllegalStateException("ALPN version not defined for Java version: ${javaVersion}; extracted minor version: ${version}")
        }
    }()
    project.logger.quiet("Resolved ALPN version ${alpnVersion} for Java ${javaVersion}")
    return alpnVersion
}

dependencies {
    compile project(':hermes-common')
    compile project(':hermes-consumers')
    compile project(':hermes-frontend')
    compile project(':hermes-management')
    compile project(':hermes-client')
    compile project(':hermes-tracker')
    compile project(':hermes-tracker-mongo')

    testCompile project(':hermes-test-helper')
    testCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    testCompile group: 'org.apache.curator', name: 'curator-test', version: versions.curator
    testCompile group: 'com.github.fakemongo', name: 'fongo', version: versions.fongo
    testCompile group: 'org.springframework', name: 'spring-web', version: versions.spring_web
    testCompile group: 'com.squareup.okhttp3', name: 'okhttp', version: versions.okhttp

    testCompile files('./lib/schema-repo-server-0.1.3-jersey2.jar');
    testCompile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: versions.jersey
    testCompile group: 'org.freemarker', name: 'freemarker', version: '2.3.21'
    testCompile group: 'org.schemarepo', name: 'schema-repo-common', version: '0.1.3'
    testCompile group: 'io.confluent', name: 'kafka-schema-registry', version: '4.1.2'
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
        testCompile group: 'org.eclipse.jetty', name: 'jetty-server', version: versions.jetty
        testCompile group: 'org.eclipse.jetty', name: 'jetty-alpn-openjdk8-server', version: versions.jetty
    } else {
        testCompile group: 'org.eclipse.jetty', name: 'jetty-alpn-java-server', version: versions.jetty
    }
    testCompile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: versions.jetty
    testCompile group: 'org.eclipse.jetty', name: 'jetty-servlets', version: versions.jetty
    testCompile group: 'org.glassfish.jersey.bundles.repackaged', name: 'jersey-guava', version: '2.23.2'

    testCompile(group: 'org.hornetq', name: 'hornetq-jms-server', version: '2.4.1.Final') {
        exclude module: 'hornetq-native'
    }

    testCompile group: 'org.eclipse.jetty.alpn', name: 'alpn-api', version: versions.alpn_api
    alpnboot group: 'org.mortbay.jetty.alpn', name: 'alpn-boot', version: getAlpnVersion()
}

project.sourceSets {
    integration {
        java.srcDir project.file('src/integration/java')

        resources.srcDir project.file('src/integration/resources')
        resources.srcDir project.sourceSets.test.resources
        resources.srcDir project.sourceSets.main.resources

        project.plugins.withType(GroovyPlugin) {
            groovy.srcDir project.file('src/integration/groovy')
        }

        compileClasspath = project.sourceSets.main.output +
                project.configurations.testRuntime +
                project.configurations.integration
        runtimeClasspath = output + compileClasspath + project.configurations.testRuntime
    }
}

task integrationTest(type: Test) {
    logging.captureStandardOutput LogLevel.INFO

    def args = []
    if(JavaVersion.current() == JavaVersion.VERSION_1_8){
        args = ["-Xbootclasspath/p:${project.configurations.alpnboot.asPath}"]
    }
    if (project.hasProperty('tests.timeout.multiplier')) {
        args += "-Dtests.timeout.multiplier=${project.property('tests.timeout.multiplier')}"
    }
    jvmArgs = args
    minHeapSize "2000m"
    maxHeapSize "3500m"

    group = 'Verification'
    description = 'Runs the integration tests.'

    testClassesDirs = project.sourceSets.integration.output.classesDirs
    classpath = project.sourceSets.integration.runtimeClasspath

    useTestNG()

    testLogging {
        exceptionFormat = 'full'
        events "passed", "skipped", "failed", "standardError", "standardOut"
    }
}

