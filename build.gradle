import java.time.Duration

buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}

scmVersion {
    tag {
        prefix = 'hermes-'
    }

    versionCreator 'versionWithBranch'
}

nexusPublishing {
    connectTimeout = Duration.ofMinutes(getIntProperty('publishingTimeoutInMin', 10))
    clientTimeout = Duration.ofMinutes(getIntProperty('publishingTimeoutInMin', 10))
    repositories {
        sonatype {
            stagingProfileId = '19d6feb4b1fb3' // id for group 'pl.allegro.tech.hermes'
            username = System.getenv("SONATYPE_USERNAME")
            password = System.getenv("SONATYPE_PASSWORD")
        }
    }
    transitionCheckOptions {
        maxRetries.set(getIntProperty('attemptsToCloseStagingRepository', 30))
        delayBetween.set(Duration.ofSeconds(getIntProperty('delayInSecBetweenCloseStagingRepositoryAttempts', 45)))
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'checkstyle'

    group = 'pl.allegro.tech.hermes'
    version = scmVersion.version

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    project.ext.versions = [
            kafka             : '2.7.0',
            guava             : '23.0',
            jackson           : '2.11.4',
            jersey            : '2.35',
            jetty             : '9.4.19.v20190610',
            curator           : '2.12.0',
            dropwizard_metrics: '4.1.0',
            micrometer_metrics: '1.2.1',
            wiremock          : '2.27.2',
            spock             : '1.3-groovy-2.5',
            groovy            : '2.5.16',
            alpn_api          : '1.1.2.v20150522',
            avro              : '1.9.1',
            json2avro         : '0.2.14',
            okhttp            : '3.9.1',
            undertow          : '2.0.29.Final',
            spring_web        : '5.1.5.RELEASE',
            failsafe          : '2.3.1',
            junit_jupiter     : '5.8.2',
            testcontainers    : '1.17.3',
            spring            : '2.4.2',
            assertj           : '3.22.0'
    ]

    repositories {
        mavenCentral()
    }

    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

        testCompile group: 'junit', name: 'junit', version: '4.11'
        testCompile group: 'com.tngtech.java', name: 'junit-dataprovider', version: '1.10.0'
        testCompile group: 'pl.pragmatists', name: 'JUnitParams', version: '1.0.2'
        testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
        testCompile group: 'org.assertj', name: 'assertj-core', version: versions.assertj
        testCompile group: 'com.jayway.awaitility', name: 'awaitility', version: '1.6.1'
        testCompile group: 'com.googlecode.catch-exception', name: 'catch-exception', version: '1.2.0'
    }

    test {
        if (project.hasProperty('tests.timeout.multiplier')) {
            jvmArgs = ["-Dtests.timeout.multiplier=${project.property('tests.timeout.multiplier')}"]
        }
    }
}

configure(subprojects - project(':integration')) {
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.name
                from(components.java)
                pom {
                    name = project.name
                    description = 'Fast and reliable message broker built on top of Kafka.'
                    url = 'https://github.com/allegro/hermes'
                    inceptionYear = '2015'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'skyeden'
                            name = 'Skylab Eden Team'
                        }
                    }
                    scm {
                        url = 'https://github.com/allegro/hermes'
                        connection = 'scm:git@github.com:allegro/hermes.git'
                        developerConnection = 'scm:git@github.com:allegro/hermes.git'
                    }
                }
            }
        }
    }

    if (System.getenv("GPG_KEY_ID")) {
        signing {
            useInMemoryPgpKeys(
                    System.getenv("GPG_KEY_ID"),
                    System.getenv("GPG_PRIVATE_KEY"),
                    System.getenv("GPG_PRIVATE_KEY_PASSWORD")
            )
            sign publishing.publications.mavenJava
        }
    }
}

subprojects {
    configurations {
        all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
        all*.exclude group: "log4j", module: "log4j"
        all*.resolutionStrategy*.force 'org.jboss.logging:jboss-logging:3.2.1.Final'
        all*.resolutionStrategy*.force "com.google.guava:guava:${versions.guava}"
        all*.resolutionStrategy*.force "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
        all*.resolutionStrategy*.force "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
        all*.resolutionStrategy*.force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${versions.jackson}"
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked,deprecation"
    }

    test {
        reports {
            html.enabled = false
            junitXml.enabled = true
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        testLogging {
            exceptionFormat = 'full'
            events 'passed', 'skipped', 'failed'
        }
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.required = true
            html.required = false
        }
    }

    checkstyle {
        toolVersion '10.3.4'
    }
}

def getIntProperty(String name, int defaultValue) {
    Integer.valueOf(project.findProperty(name) ?: defaultValue)
}
